[
["randomvars.html", "Chapter 5 Properties of random variables 5.1 Expected values and the law of large numbers 5.2 Variance and standard deviation 5.3 Joint distributions, covariance, and correlation 5.4 Conditional distribution, expectation, variance 5.5 The central limit theorem 5.6 A probabilistic model for simple linear regression", " Chapter 5 Properties of random variables library(tidyverse) theme_set(theme_bw(base_size = 12) + theme(strip.background = element_blank(), panel.grid = element_blank())) 5.1 Expected values and the law of large numbers 5.1.1 Exercise set 5-1 On paper samp.size &lt;- 1 n.samps &lt;- 1000 samps &lt;- rnorm(samp.size * n.samps, mean = 0, sd = 1) samp.mat &lt;- matrix(samps, ncol = n.samps) samp.means &lt;- colMeans(samp.mat) hist(samp.means) samp.size &lt;- 100 n.samps &lt;- 1000 samps &lt;-matrix(rexp(samp.size*n.samps, rate = 1), ncol = n.samps) samp.means &lt;- colMeans(samps) hist(samp.means) 5.2 Variance and standard deviation 5.3 Joint distributions, covariance, and correlation 5.4 Conditional distribution, expectation, variance 5.5 The central limit theorem 5.5.1 Exercise set 5-4 Bean machine in action! library(animation) nball &lt;- 500 #change the number of balls nlayer &lt;- 10 #change the number of rows of pegs on the board rate &lt;- 10 #change the speed at which the balls fall ani.options(nmax = nball + nlayer - 2, interval = 1/rate) quincunx(balls = nball, layers = nlayer) Exploring the beta distribution To see what the beta distribution looks like for a given set of shape parameters, set the sample size to 1. For example: library(stfspack) # dosm.beta.hist(n = 1, nsim = 10000, shape1 = 1, shape2 = 1) dosm.beta.hist ## function (n, nsim, shape1 = 1, shape2 = 1, ...) ## { ## samps &lt;- rbeta(n * nsim, shape1, shape2) ## sim.mat &lt;- matrix(samps, nrow = nsim) ## dosm &lt;- rowMeans(sim.mat) ## hist(dosm, freq = FALSE, ...) ## x &lt;- seq(0, 1, length.out = 1000) ## lines(x, dnorm(x, mean = mean(dosm), sd = sd(dosm))) ## c(`mean of DOSM` = mean(dosm), `SD of DOSM` = sd(dosm), `var of DOSM` = var(dosm)) ## } ## &lt;bytecode: 0x7fa3d5e854a0&gt; ## &lt;environment: namespace:stfspack&gt; will give you a histogram of 10,000 observations from a beta distribution with parameters 1 and 1. If you increase the sample size, then the distribution of the sample mean gets closer to normality. Try this — starting with samples of size 1 and increasing the sample size—with the following sets of parameter values: (1, 1), (0.2, 0.2), (2, 0.5), (0.5, 2), (3, 3). Feel free to try other parameter sets—it’s fun. What do you notice? sims &lt;- 10000 s1 &lt;- 0.2 # change this s2 &lt;- 0.2 # change this par(mfrow = c(2,3)) dosm.beta.hist(n = 1, nsim = sims, shape1 = s1, shape2 = s2) ## mean of DOSM SD of DOSM var of DOSM ## 0.4990109 0.4228197 0.1787765 dosm.beta.hist(n = 8, nsim = sims, shape1 = s1, shape2 = s2) ## mean of DOSM SD of DOSM var of DOSM ## 0.4995383 0.1503004 0.0225902 dosm.beta.hist(n = 16, nsim = sims, shape1 = s1, shape2 = s2) ## mean of DOSM SD of DOSM var of DOSM ## 0.50007775 0.10551245 0.01113288 dosm.beta.hist(n = 32, nsim = sims, shape1 = s1, shape2 = s2) ## mean of DOSM SD of DOSM var of DOSM ## 0.501064679 0.074632731 0.005570045 dosm.beta.hist(n = 64, nsim = sims, shape1 = s1, shape2 = s2) ## mean of DOSM SD of DOSM var of DOSM ## 0.49972645 0.05220469 0.00272533 dosm.beta.hist(n = 128, nsim = sims, shape1 = s1, shape2 = s2) ## mean of DOSM SD of DOSM var of DOSM ## 0.500424795 0.037352264 0.001395192 Let’s deconstruct what is going on with this function, where n = 1 (we simulate 10000 observations from a single set of parameter values). nsim &lt;- 10000 n &lt;- 1 s1 &lt;- 0.2 # change this s2 &lt;- 0.2 # change this samps &lt;- rbeta(n * nsim, shape1 = s1, shape2 = s2) str(samps) # here are 10,000 ## num [1:10000] 0.26 0.99 0.916 0.231 0.767 ... # We are just converting the vector into a matrix # So that we can easily calculate the mean of each row sim.mat &lt;- matrix(samps, nrow = nsim) dim(sim.mat) ## [1] 10000 1 head(sim.mat) ## [,1] ## [1,] 0.2596638 ## [2,] 0.9902874 ## [3,] 0.9162283 ## [4,] 0.2309883 ## [5,] 0.7674306 ## [6,] 0.5669877 # Calculate rowmeans - with n=1, this doesn&#39;t change anything # But change n to anything bigger and inspect the dimensions of the objects dosm &lt;- rowMeans(sim.mat) str(dosm) ## num [1:10000] 0.26 0.99 0.916 0.231 0.767 ... head(dosm) # compare these values to sim.mat ## [1] 0.2596638 0.9902874 0.9162283 0.2309883 0.7674306 0.5669877 par(mfrow = c(1,1)) hist(dosm, freq = FALSE) # plotting the simulated values # Set up a vector that goes from 0 to 1 to overlay a normal distribution on the histogram x &lt;- seq(0, 1, length.out = 1000) # Now plot a normal distribution, using the mean and sd of the simulated values lines(x, dnorm(x, mean = mean(dosm), sd = sd(dosm)), col = &quot;red&quot;) 5.6 A probabilistic model for simple linear regression "]
]
